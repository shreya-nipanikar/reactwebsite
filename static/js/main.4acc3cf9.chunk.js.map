{"version":3,"sources":["logo.svg","serviceWorker.js","Avatarlist.js","Avatar.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Avatarlist","props","className","src","name","alt","work","Avatar","state","this","setState","avaratlistarray","id","arraycard","map","myavatar","i","key","onClick","namechange","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sFAAAA,EAAOC,QAAU,IAA0B,kC,yLCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gCCLSC,G,YAXI,SAACC,GAChB,OACI,yBAAKC,UAAY,4DACd,yBAAKC,IAAG,sCAAiCF,EAAMG,MAAQC,IAAI,WAC3D,wCACA,gCAAMJ,EAAMG,MACZ,gCAAMH,EAAMK,SC+DRC,E,kDAhEX,aAAe,IAAD,8BACV,gBACKC,MAAQ,CACTJ,KAAM,4BAHA,E,yDAQVK,KAAKC,SAAU,CACXN,KAAM,wD,+BAIH,IAAD,OAEAO,EAAkB,CACpB,CACIC,GAAI,EACJR,KAAM,gBACNE,KAAM,iBAGV,CACIM,GAAI,EACJR,KAAM,YACNE,KAAM,wBAGV,CACIM,GAAI,EACJR,KAAM,cACNE,KAAM,iBAGV,CACIM,GAAI,EACJR,KAAM,aACNE,KAAM,qBAITO,EAAYF,EAAgBG,KAAK,SAACC,EAAUC,GAC9C,OAAO,kBAAC,EAAD,CAAYC,IAAKD,EAAGJ,GAAID,EAAgBK,GAAGZ,KAC1CA,KAAMO,EAAgBK,GAAGZ,KACzBE,KAAMK,EAAgBK,GAAGV,UAIpC,OACI,6BACI,wBAAIJ,UAAU,MAAd,IAAqBO,KAAKD,MAAMJ,MAC/BS,EACA,6BACA,gCACA,4BAAQK,QAAW,kBAAM,EAAKC,eAA9B,mC,GAxDIC,aCGrBC,IAASC,OACP,6BACE,kBAAC,EAAD,OACKC,SAASC,eAAe,SHwH3B,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4acc3cf9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\nconst Avatarlist = (props) => {\r\n    return (\r\n        <div className = \"avatarstyle ma4 bg-light-purple dib pa4 tc grow shadow-4\">\r\n           <img src={`https://joeschmoe.io/api/v1/${props.name}`} alt=\"Avatar\" />\r\n           <h1> Hey Hi!</h1>\r\n           <h2> {props.name}</h2>\r\n           <h4> {props.work}</h4>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Avatarlist;","import React, { Component } from 'react';\r\nimport './Avatar.css';\r\nimport 'tachyons';\r\nimport Avatarlist from './Avatarlist';\r\n\r\nclass Avatar extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            name: \"Welcome to Avatar World!\"\r\n        }\r\n    }\r\n\r\n    namechange() {\r\n        this.setState ({\r\n            name: \"Hey Honey! You have been subscribed successfully!\"\r\n        })\r\n    }\r\n\r\n    render () {\r\n\r\n        const avaratlistarray = [\r\n            {\r\n                id: 1,\r\n                name: \"Sanae Lacchab\",\r\n                work: \"Web developer\"\r\n            },\r\n            \r\n            {\r\n                id: 2,\r\n                name: \"HariPriya\",\r\n                work: \"Full Stack developer\"\r\n            },\r\n            \r\n            {\r\n                id: 3,\r\n                name: \"Grey Christ\",\r\n                work: \"C++ developer\"\r\n            },\r\n            \r\n            {\r\n                id: 4,\r\n                name: \"Julie Joss\",\r\n                work: \"Python developer\"\r\n            }\r\n        ]\r\n    \r\n       const arraycard = avaratlistarray.map( (myavatar, i) => {\r\n           return <Avatarlist key={i} id={avaratlistarray[i].name} \r\n                   name={avaratlistarray[i].name} \r\n                   work={avaratlistarray[i].work} />\r\n    \r\n       })\r\n\r\n        return (\r\n            <div>\r\n                <h1 className=\"tc\"> {this.state.name}</h1> \r\n                {arraycard}\r\n                 <br></br>\r\n                 <center>\r\n                 <button onClick= { () => this.namechange()}> Click Here to Subscribe!</button>\r\n                 </center>\r\n        \r\n        </div>\r\n        )\r\n        \r\n    }\r\n}\r\n\r\n    \r\nexport default Avatar;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport Avatar from './Avatar';\n\nReactDOM.render(\n  <div>\n    <Avatar />\n </div>, document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}